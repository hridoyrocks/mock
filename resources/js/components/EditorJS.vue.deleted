<template>
    <div>
        <div :id="editorId" class="editor-container"></div>
        <textarea 
            :id="textareaId" 
            :name="name" 
            style="display: none;"
            :value="value"
        ></textarea>
    </div>
</template>

<script>
import EditorJS from '@editorjs/editorjs';
import Header from '@editorjs/header';
import List from '@editorjs/list';
import Image from '@editorjs/image';
import Quote from '@editorjs/quote';
import Delimiter from '@editorjs/delimiter';
import Table from '@editorjs/table';

export default {
    props: {
        editorId: {
            type: String,
            required: true
        },
        textareaId: {
            type: String,
            required: true
        },
        name: {
            type: String,
            required: true
        },
        value: {
            type: String,
            default: ''
        },
        placeholder: {
            type: String,
            default: 'Start typing...'
        },
        minHeight: {
            type: Number,
            default: 400
        }
    },
    
    data() {
        return {
            editor: null
        };
    },
    
    mounted() {
        this.initializeEditor();
    },
    
    methods: {
        async initializeEditor() {
            // Parse initial data if exists
            let initialData = {};
            if (this.value) {
                try {
                    // If value is JSON, parse it
                    initialData = JSON.parse(this.value);
                } catch (e) {
                    // If not JSON, treat as HTML and convert
                    initialData = {
                        blocks: [{
                            type: 'paragraph',
                            data: {
                                text: this.value
                            }
                        }]
                    };
                }
            }
            
            this.editor = new EditorJS({
                holder: this.editorId,
                placeholder: this.placeholder,
                minHeight: this.minHeight,
                data: initialData,
                tools: {
                    header: {
                        class: Header,
                        config: {
                            levels: [1, 2, 3, 4],
                            defaultLevel: 2
                        }
                    },
                    list: {
                        class: List,
                        inlineToolbar: true
                    },
                    image: {
                        class: Image,
                        config: {
                            uploader: {
                                uploadByFile: this.uploadImage
                            }
                        }
                    },
                    quote: Quote,
                    delimiter: Delimiter,
                    table: {
                        class: Table,
                        inlineToolbar: true
                    }
                },
                onChange: async () => {
                    const outputData = await this.editor.save();
                    // Save as JSON
                    document.getElementById(this.textareaId).value = JSON.stringify(outputData);
                    
                    // Emit change event
                    this.$emit('change', outputData);
                }
            });
        },
        
        async uploadImage(file) {
            const formData = new FormData();
            formData.append('image', file);
            formData.append('_token', document.querySelector('meta[name="csrf-token"]').content);
            
            try {
                const response = await fetch('/admin/questions/upload-image', {
                    method: 'POST',
                    body: formData
                });
                
                const result = await response.json();
                
                if (result.success) {
                    return {
                        success: 1,
                        file: {
                            url: result.url
                        }
                    };
                }
                
                return {
                    success: 0,
                    message: result.message || 'Upload failed'
                };
            } catch (error) {
                return {
                    success: 0,
                    message: error.message
                };
            }
        },
        
        async save() {
            if (this.editor) {
                return await this.editor.save();
            }
            return null;
        }
    },
    
    beforeUnmount() {
        if (this.editor) {
            this.editor.destroy();
        }
    }
};
</script>

<style scoped>
.editor-container {
    border: 1px solid #e5e7eb;
    border-radius: 0.375rem;
    background: white;
}

.codex-editor__redactor {
    padding-bottom: 100px !important;
}
</style>
